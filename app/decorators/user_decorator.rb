# encoding: utf-8
class UserDecorator < Draper::Base
  decorates :user
  
  def friendship
    if @user != h.current_user
      if h.is_my_fried?(@user) and h.am_i_a_friend?(@user)
        link_to "Remover amigo!"
      elsif h.is_my_fried?(@user) and !h.am_i_a_friend?(@user)
        link_to "Solicitação de amizade enviada!"
      elsif !h.is_my_friend?(@user) and h.am_i_a_friend?(@user)
        link_to "Aprovar solicitação de amigo!"
      else
        link_to "Adicionar amigo!"
      end
    end
  end

#<% if @user != current_user %>
#  <% if is_my_friend?(@user) and am_i_a_friend?(@user) %>
#  <div>
#    <%= link_to "Remover amigo!" %>
#  </div>
#  <% elsif is_my_friend?(@user) and !am_i_a_friend?(@user) %>
#  <div>
#    <%= link_to "Solicitação de amizade enviada!" %>
#  </div>
#  <% elsif !is_my_friend?(@user) and am_i_a_friend?(@user) %>
#  <div>
#    <%= link_to "Aprovar solicitação de amigo!" %>
#  </div>
#  <% else %>
#  <div>
#    <%= link_to "Adicionar amigo!" %>
#  </div>
#  <% end %>
#<% end %>


  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
